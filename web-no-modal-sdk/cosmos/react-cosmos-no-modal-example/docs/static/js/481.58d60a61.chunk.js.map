{"version":3,"file":"static/js/481.58d60a61.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../node_modules/@solana/web3.js/node_modules/buffer/index.js","../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/hashes/src/cryptoBrowser.ts","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/_u64.ts","../node_modules/@noble/hashes/src/sha512.ts","../node_modules/@noble/ed25519/lib/esm/index.js","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/superstruct/src/error.ts","../node_modules/superstruct/src/utils.ts","../node_modules/superstruct/src/struct.ts","../node_modules/superstruct/src/structs/utilities.ts","../node_modules/superstruct/src/structs/types.ts","../node_modules/superstruct/src/structs/coercions.ts","../node_modules/@noble/hashes/src/sha3.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/secp256k1/lib/esm/index.js","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/message/versioned.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/transaction/versioned.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/@solana/web3.js/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/rpc-websocket.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/@web3auth/solana-provider/src/solanaWallet.ts","../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/bs58/index.js","../node_modules/eventemitter3/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/inherits.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/regeneratorRuntime.js","../node_modules/@babel/runtime/helpers/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/@babel/runtime/helpers/toPropertyKey.js","../node_modules/@babel/runtime/helpers/typeof.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new TypeError('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a: Uint8Array): string {\n  // pre-caching improves the speed 6x\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') {\n    throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n  }\n  return new TextEncoder().encode(str);\n}\n\nexport type Input = Uint8Array | string;\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!(data instanceof Uint8Array))\n    throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n  return data;\n}\n\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (!arrays.every((a) => a instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  // Cleanup internal state. Not '.clean' because instance is not usable after that.\n  // Clean usually resets instance to initial state, but it is not possible for keyed hashes if key is consumed into state.\n  // NOTE: if digest is not consumed by user, user need manually call '.destroy' if zeroing is required\n  abstract destroy(): void;\n  // Unsafe because doesn't check if \"to\" is correct. Can be used as clone() if no opts passed.\n  // Why cloneInto instead of clone? Mostly performance (same as _digestInto), but also has nice property: it reuses instance\n  // which means all internal buffers is overwritten, which also causes overwrite buffer which used for digest (in some cases).\n  // We don't provide any guarantees about cleanup (it is impossible to!), so should be enough for now.\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj: any) =>\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n    throw new TypeError('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashConstructor: () => Hash<T>) {\n  const hashC = (message: Input): Uint8Array => hashConstructor().update(toBytes(message)).digest();\n  const tmp = hashConstructor();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashConstructor();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto.web) {\n    return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n  } else if (crypto.node) {\n    return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n  } else {\n    throw new Error(\"The environment doesn't have randomBytes function\");\n  }\n}\n","// Global symbol available in browsers only\ndeclare const self: Record<string, any> | undefined;\nexport const crypto: { node?: any; web?: any } = {\n  node: undefined,\n  web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","import assert from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nexport function split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nexport const toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h: number, l: number) => l;\nconst rotr32L = (h: number, l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\n\nexport class SHA512 extends SHA2<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _8n = BigInt(8);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.BASE;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        let p = this.multiplyUnsafe(CURVE.l / _2n).double();\n        if (CURVE.l % _2n)\n            p = p.add(this);\n        return p.equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(ExtendedPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    assert.number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    assert.exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    assert.exists(this, false);\n    assert.bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    assert.number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    assert.output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructorWithOpts<Keccak, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nexport { CURVE };\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { TransactionOrVersionedTransaction } from \"../interface\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<TransactionOrVersionedTransaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>) => Promise<TransactionOrVersionedTransaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, TransactionOrVersionedTransaction>(\n      \"signTransaction\",\n      signTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, { signature: string }>(\n      \"signAndSendTransaction\",\n      signAndSendTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction[] }, TransactionOrVersionedTransaction[]>(\n      \"signAllTransactions\",\n      signAllTransactions\n    ),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"private_key\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { Connection, PublicKey, Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nconst isVersionTransction = (transaction: TransactionOrVersionedTransaction) =>\n  (transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction;\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        const item = allTxns[i];\n        const message = isVersionTransction(item) ? (item as VersionedTransaction).message.serialize() : (item as Transaction).serializeMessage();\n        unsignedTx.push(bs58.encode(message));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (\n    req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>\n  ): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 9,\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { Keypair, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { TransactionOrVersionedTransaction } from \"../../interface\";\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), { encoding: \"base64\" }],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n          (transaction as VersionedTransaction).sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet, TransactionOrVersionedTransaction } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<T> {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return signedTransaction as T;\n  }\n\n  public async signAllTransactions<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<T[]> {\n    const signedTransactions = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    });\n    return signedTransactions as T[];\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (obj, key, desc) {\n      obj[key] = desc.value;\n    },\n    $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = Object.create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return defineProperty(generator, \"_invoke\", {\n      value: makeInvokeMethod(innerFn, self, context)\n    }), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    defineProperty(this, \"_invoke\", {\n      value: function value(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = \"suspendedStart\";\n    return function (method, arg) {\n      if (\"executing\" === state) throw new Error(\"Generator is already running\");\n      if (\"completed\" === state) {\n        if (\"throw\" === method) throw arg;\n        return doneResult();\n      }\n      for (context.method = method, context.arg = arg;;) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n          if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n          context.dispatchException(context.arg);\n        } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n        state = \"executing\";\n        var record = tryCatch(innerFn, self, context);\n        if (\"normal\" === record.type) {\n          if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        }\n        \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method,\n      method = delegate.iterator[methodName];\n    if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel;\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (val) {\n    var object = Object(val),\n      keys = [];\n    for (var key in object) keys.push(key);\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","buffer_1","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","undefined","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","base64","require","ieee754","customInspectSymbol","Symbol","Buffer","K_MAX_LENGTH","createBuffer","buf","setPrototypeOf","arg","encodingOrOffset","allocUnsafe","string","encoding","isEncoding","byteLength","actual","fromString","ArrayBuffer","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","obj","isBuffer","len","checked","numberIsNaN","type","data","fromObject","toPrimitive","assertSize","size","array","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","end","this","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","m","bidirectionalIndexOf","val","dir","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","j","hexWrite","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","charCodeAt","asciiToBytes","base64Write","ucs2Write","units","c","hi","utf16leToBytes","fromByteArray","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","error","defineProperty","enumerable","get","poolSize","alloc","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUintLE","mul","readUintBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readInt8","readInt16LE","readInt16BE","readBigInt64LE","readBigInt64BE","writeUintLE","writeUintBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUint32BE","writeBigUInt64LE","writeBigUInt64BE","limit","sub","writeInt8","writeInt16LE","writeInt16BE","writeBigInt64LE","writeBigInt64BE","targetStart","copyWithin","code","errors","E","sym","getMessage","Base","super","writable","configurable","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","abs","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","base64clean","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","number","isSafeInteger","lengths","assert","bool","hash","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","createView","self","crypto","DataView","rotr","Uint32Array","padStart","toBytes","TextEncoder","Hash","clone","_cloneInto","wrapConstructor","hashConstructor","hashC","update","digest","tmp","SHA2","padOffset","isLE","view","take","process","dataView","roundClean","digestInto","setBigUint64","_32n","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","destroy","to","U32_MASK64","fromBig","lst","le","Ah","Al","toBig","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","u64","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_224","SHA512_256","SHA384","sha512","_0n","_1n","_2n","_8n","CU_O","CURVE","freeze","d","P","Gx","Gy","POW_2_256","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","z","t","static","p","Point","ZERO","mod","points","toInv","nums","inverted","invert","num","reduceRight","invertBatch","toAffine","toAffineBatch","fromAffine","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","X2Z1","Y1Z2","Y2Z1","negate","double","A","B","C","D","x1y1","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","precomputeWindow","W","windows","base","window","wNAF","affinePoint","BASE","_WINDOW_SIZE","precomputes","pointPrecomputes","normalizeZ","f","windowSize","mask","maxNumber","shiftBy","wbits","offset1","offset2","cond1","cond2","constTimeNegate","multiply","scalar","normalizeScalar","multiplyUnsafe","P0","isSmallOrder","isTorsionFree","invZ","is0","ax","ay","zz","fromRistrettoBytes","legacyRist","toRistrettoBytes","fromRistrettoHash","condition","item","neg","assertRstPoint","RistrettoPoint","ep","r0","r","Ns","isValid","Ns_D_is_sq","uvRatio","s_","edIsNegative","Nt","s2","W0","W1","W2","W3","hex","r1","bytes255ToNumberLE","ensureBytes","R1","calcElligatorRistrettoMap","r2","R2","emsg","b1","b2","equalBytes","numberTo32BytesLE","u1","u2","u1_2","u2_2","I","invertSqrt","Dx","Dy","toRawBytes","u2sq","invsqrt","D1","D2","zInv","_x","_y","toHex","bytesToHex","one","two","WeakMap","_setWindowSize","delete","strict","normed","bytesToNumberLE","y2","u","isXOdd","privateKey","getExtendedPublicKey","point","toX25519","Signature","assertValidity","fromHex","u8","concatBytes","arrays","every","result","pad","hexes","uint8a","hexToBytes","hexByte","byte","isNaN","numberTo32BytesBE","reverse","MAX_255B","modulo","q","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","expectedLength","adjustBytes25519","checkPrivateKey","key","getKeyFromHash","hashed","head","prefix","pointBytes","_sha512Sync","sha512s","async","utils","getExtendedPublicKeySync","prepareVerification","sig","publicKey","SB","pub","finishVerification","k","kA","sync","getPublicKey","sign","R","verify","node","nodeCrypto","web","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","bytesLength","getRandomValues","randomPrivateKey","subtle","createHash","precompute","cached","sha512Sync","defineProperties","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","s0","s1","SHA224","sha256","StructError","failure","failures","rest","path","join","isObject","print","JSON","stringify","toFailure","context","struct","branch","refinement","toFailures","iterator","run","options","coerce","ctx","coercer","schema","valid","validator","entries","ts","Map","Set","refiner","Struct","props","validate","is","tuples","tuple","done","next","shiftIterator","define","Element","boolean","Class","literal","constant","description","never","nullable","optional","record","Key","Value","Elements","Never","keys","Structs","S","unknown","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","keccak","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","finish","writeInto","bufferOut","xofInto","xof","gen","keccak_256","genShake","hashCons","opts","wrapConstructorWithOpts","dkLen","HMAC","_key","iHash","oHash","getPrototypeOf","hmac","_3n","beta","divNearest","endo","splitScalar","a1","a2","POW_2_128","c1","c2","k1","k2","k1neg","k2neg","fieldLen","groupLen","hashLen","compressedLen","uncompressedLen","weierstrass","x2","x3","USE_ENDOMORPHISM","ShaError","assertJacPoint","JacobianPoint","scratch","Z1Z1","Z2Z2","U1","U2","S1","S2","x1b","HH","HHH","V","k1p","k2p","fake","f1p","f2p","iz1","iz2","iz3","hasEvenY","isShort","bytesToNumber","isValidFieldElement","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","rt","sqrtMod","isYOdd","header","fromCompressedHex","fromUncompressedHex","normalizePrivateKey","msgHash","signature","recovery","normalizeSignature","truncateHash","radj","rinv","numTo32bStr","Q","multiplyAndAddUnsafe","isCompressed","toHexX","toRawX","left","aP","bQ","sliceDER","parseDERInt","hexToNumber","sBytes","rBytesLeft","parseDERSignature","fromDER","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","sHexL","rHexL","sLen","rLen","toCompactRawBytes","toCompactHex","numTo32b","truncateOnly","delta","bits2int_2","_sha256Sync","_hmacSha256Sync","HmacDrbg","qByteLen","counter","hmacSha256","hmacSync","checkSync","incr","seed","reseedSync","sl","generateSync","kmdToSig","kBytes","lowS","kinv","fromCompact","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","finalizeSig","recSig","der","recovered","canonical","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","minLen","messages","forEach","ckey","importKey","createHmac","sha256Sync","hmacSha256Sync","taggedHash","tagP","tagH","taggedHashSync","_JacobianPoint","ed25519","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","properties","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","toStringTag","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","eq","toBase58","toArrayLike","zeroPad","_Symbol$toStringTag","fromPublicKey","programId","publicKeyBytes","seeds","createProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddressSync","pubkeyData","default","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","field","decodeLength","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","compile","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","items","compileMessage","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","invariant","_compile","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","ceil","chunkSize","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","objToString","objKeys","isArrayProp","propVal","toStr","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","customMessage","globalThis","fetch","RpcWebSocketClient","RpcWebSocketCommonClient","generate_request_id","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","reject","notify","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","pick","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","makeWebsocketUrl","customFetch","fetchImpl","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","RpcClient","request","callback","method","body","agent","headers","too_many_requests_retries","waitTime","log","statusText","text","ok","createRpcClient","client","createRpcRequest","requests","batch","methodName","createRpcBatchRequest","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","_buildArgs","getBalanceAndContext","then","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","mintAddress","getAccountInfoAndContext","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","configOrCommitment","configWithoutEncoding","strategy","rawSignature","decodedSignature","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","expiryPromise","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","startSlot","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","unsafeRes","transactionDetails","extra","block","endSlot","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","_blockhashWithExpiryBlockHeight","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this$_subscriptionSt","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","fastStableStringify","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","lookupTableAddress","bumpSeed","recentSlot","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","PRIVATE_KEY_BYTES","fromSecretKey","createInstructionWithPublicKey","secp256k1","msgs","ecdsaSign","privKey","drbg","publicKeyCreate","fromPrivateKey","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","ETHEREUM_ADDRESS_BYTES","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","stakePubkey","lockup","maybeLockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","Voter","VoteProgram","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","voteAuthorizeWithSeedArgs","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","createChainIdMiddleware","chainId","req","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createGetAccountsMiddleware","_ref","getAccounts","createAsyncMiddleware","createRequestAccountsMiddleware","_ref2","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","BaseProvider","chainConfig","chainNamespace","CHAIN_NAMESPACES","injectedProvider","engine","JRPCEngine","solanaMiddleware","getProviderHandlers","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","getBaseProviderHandlers","ethErrors","display","_req$params","_req$params2","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","isVersionTransction","SlopeInjectedProxyProvider","getProviderEngineProxy","txMessage","conn","rpcTarget","allTxns","unsignedTx","_data$signatures","getSlopeHandlers","SolflareInjectedProvider","solflareProviderHandlers","getSolflareHandlers","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","emit","_req$params4","_req$params5","getTorusHandlers","configure","_objectSpread","setupProvider","SolanaPrivateKeyProvider","_providerEngineProxy","keyPair","nacl","txns","_req$params6","tx","networkMiddleware","createFetchMiddleware","createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","_ref3","addNewChainConfig","switchSolanaChain","createChainSwitchMiddleware","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","switchChain","_ref4","updatePrivatekey","createAccountMiddleware","updateAccount","providerFactory","SolanaWallet","_defineProperty","_Buffer","module","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","pbegin","pend","b58","it1","it2","repeat","reversed","width","__createBinding","o","__setModuleDefault","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","fieldName","maybeResize","writeU8","writeU16","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readU8","readU16","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","serializeStruct","borshSerialize","structSchema","deserializeField","reader","deserializeStruct","classType","borshDeserialize","basex","Events","EE","once","addListener","emitter","event","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","__proto__","eventNames","events","names","getOwnPropertySymbols","listeners","handlers","ee","listenerCount","a3","a4","a5","removeListener","removeAllListeners","off","prefixed","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","isBatch","hasCallback","_parseResponse","responseText","parse","isError","isNotError","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","_isNativeReflectConstruct","Super","NewTarget","__rest","propertyIsEnumerable","CommonClient","_EventEmitter","_super","webSocketFactory","_this","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","timeout","ws_opts","_this2","send","promise","_login","mark","_callee","resp","wrap","_context","prev","sent","abrupt","stop","_listMethods","_callee2","_context2","_this3","_subscribe","_callee3","_context3","_x2","_unsubscribe","_callee4","_context4","_x3","_this4","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","rnds8","rng","msCrypto","REGEX","byteToHex","rnds","random","ReferenceError","asyncGeneratorStep","_throw","Constructor","toPropertyKey","_defineProperties","descriptor","protoProps","staticProps","_getPrototypeOf","subClass","superClass","_typeof","assertThisInitialized","_regeneratorRuntime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","innerFn","outerFn","tryLocsList","protoGenerator","Generator","Context","makeInvokeMethod","tryCatch","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","_invoke","AsyncIterator","PromiseImpl","invoke","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","doneResult","delegate","delegateResult","maybeInvokeDelegate","_sent","dispatchException","resultName","nextLoc","pushTryEntry","locs","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isGeneratorFunction","genFun","ctor","awrap","iter","object","pop","skipTempReset","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","thrown","delegateYield","_setPrototypeOf","hint","prim","runtime","regeneratorRuntime","accidentalStrictMode","Function","inRange","ToDictionary","end_of_stream","Stream","tokens","endOfStream","prepend","token","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}